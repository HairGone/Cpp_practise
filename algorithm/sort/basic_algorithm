// sort.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//

#include "pch.h"
#include <iostream>

//冒泡排序，char=1递减，char=0递增
void popSort(int *p, int size, const char order)
{
	int tmp;

	for (int i = 0; i < (size - 1); i++)
	{
		for (int j = 0; j < (size -i- 1); j++)
		{
			if (order == '1')
			{
				if (p[j] <p[j + 1])
				{
					tmp = p[j + 1];
					p[j + 1] = p[j];
					p[j] = tmp;
				}
			}
			else
			{
				if (p[j] > p[j + 1])// order=greater which is default
				{
					tmp = p[j + 1];
					p[j + 1] = p[j];
					p[j] = tmp;
				}
			}
		}
	}
}
//冒泡排序

//插入算法 （从小到大哦）
//i需要插入的元素位置，j为需要比较的次数（插入1个比较1次，插入第二个比较2次，
//插入第三个比较3次，已排序的元素有多少个新插入的元素就需要比较多少次）

void insertSort(int *arr, int n)
{
	int i, j, key;
	for (i = 1; i < n; i++)//i为需要插入的数的标签，需要插入n-1个元素，从第二个开始插入
	{
		key = arr[i];//暂存插入的值
		for (j = i; j > 0 && key < arr[j - 1]; j--)
		{
			arr[j] = arr[j - 1]; //找到需要插入的位置

		}
		arr[j] = key;
	}
}
//插入算法

//希尔算法
void shellSort(int *arr, int n)
{
	int d = n / 2;
	while (d >= 1)
	{
		int i, j, key;
		for (i = d; i < n; i++)
		{
			key = arr[i];
			for (j = i; j > 0 && key < arr[j - d];j=j-d) //注意整理不是j--，因为j--是在d=1时的j=j-d
			{
				arr[j] = arr[j-d];
			}
			arr[j]=key;
		}
		d = d / 2;
	}
}

//希尔算法

//选择排序 （从小到大）
//第i个数与后面数比较，选出最小放在i处
void selectSort(int *arr, int n)
{
	int idx;//idx表示最小值的位置；
	for (int i = 0; i < n - 1; i++)//n个数比较n-1次
	{
		idx = i;
		for (int j = i + 1; j < n; j++) //找出最小值的位置
		{
			if (arr[idx] > arr[j])
			idx = j;
		}

		if (idx != i)
		{
			arr[i] = arr[idx] ^ arr[i];
			arr[idx] ^= arr[i];
			arr[i] ^= arr[idx];
		}
	}
}
//选择排序

//快速排序
void quickSort(int *arr,int left,int right)
{
	if (left < right)
	{
		int val = arr[left];
		int low = left; int high = right;
		while (low < high)
		{
			while (arr[high] >= val&&low<high)
				high--;
			arr[low] = arr[high];
			while (arr[low] <= val&&low<high) //注意<=与>=，注意&&条件
				low++;
			arr[high]=arr[low];
		}
		arr[low] = val;
		quickSort(arr, left, low - 1);//注意，这里low位置确定下val后就不会再变动了。
		quickSort(arr, low+1, right);
	}

}
//快速排序

//归序
void merge(int *arr, int start, int mid, int end)
{
	
	int *temp;
	int k = 0;
	temp = (int *)malloc((end - start + 1) * sizeof(int));
	int i = start;
	//mid = (start + end) / 2;
	int j = mid + 1;
	while (i <= mid && j<= end)//你第一次写错啦(arr[i] <= mid && arr[j] <= end) 
	{
		if (arr[i] <= arr[j])//排序条件
			temp[k++]=arr[i++];
		else
			temp[k++] = arr[j++];
	}

	while (i<=mid)
		temp[k++] = arr[i++];
	while(j<=end)
		temp[k++] = arr[j++]; //这里会不会出现i全分完类，但是j没有分完呢。不会，因为最底层长度为1的数组，合并
	//至上一层后，已经自动排序好。然后两个长度为2的数组合并，即使第一个数组提前全放入temp，跳出了第一个while循环
	//第二个数组本身就是自动排序好的（根据排序条件），所以不需要在第二个第三个while处校核数组排序

	for (i = 0; i < k; i++)
		arr[start + i] = temp[i]; //注意这里temp的长度为k，所以不能写end。而且赋值是=不是==；
	free(temp);
}


void merge_sort_up2down(int *arr, int start, int end)
{
	if (arr== NULL || start >= end)
		return;
	int mid = (start + end) / 2;
	merge_sort_up2down(arr, start, mid);
	merge_sort_up2down(arr, mid+1, end);//加一不要忘了！！！！
	merge(arr, start, mid, end);
}


/*//这是参考http://www.cnblogs.com/skywang12345/p/3602369.html， 找个时间自己写一遍
 * 对数组a做若干次合并：数组a的总长度为len，将它分为若干个长度为gap的子数组；
 *             将"每2个相邻的子数组" 进行合并排序。
 *
 * 参数说明：
 *     a -- 待排序的数组
// *     len -- 数组的长度
// *     gap -- 子数组的长度
// */
//void merge_groups(int a[], int len, int gap)
//{
//	int i;
//	int twolen = 2 * gap;    // 两个相邻的子数组的长度
//
//	// 将"每2个相邻的子数组" 进行合并排序。
//	for (i = 0; i + 2 * gap - 1 < len; i += (2 * gap))
//	{
//		merge(a, i, i + gap - 1, i + 2 * gap - 1);
//	}
//
//	// 若 i+gap-1 < len-1，则剩余一个子数组没有配对。
//	// 将该子数组合并到已排序的数组中。
//	if (i + gap - 1 < len - 1)
//	{
//		merge(a, i, i + gap - 1, len - 1);
//	}
//}

///*
// * 归并排序(从下往上)
// *
// * 参数说明：
// *     a -- 待排序的数组
// *     len -- 数组的长度
// */
//void merge_sort_down2up(int a[], int len)
//{
//	int n;
//
//	if (a == NULL || len <= 0)
//		return;
//
//	for (n = 1; n < len; n *= 2)
//		merge_groups(a, len, n);
//}
//归序

int main()
{
	int arr[] = { 8, 2, 5, 4, 2, 5, 6 };
	int n = sizeof(arr) / sizeof(int);
	////冒泡测试
	//popSort(arr, sizeof(arr) / sizeof(int), '0');

	//插入测试
	//insertSort(arr, sizeof(arr) / sizeof(int));

	//希尔排序
	//shellSort(arr, n);

	//选择排序
	//selectSort(arr, n);

	//快速排序
	//quickSort(arr, 0, 6);

	//归序排列
	merge_sort_up2down(arr, 0, 6);
	int k = 0;

	while (1)
	{
		std::cout << arr[k] << " ";
		k++;
		if (k == 7) break;
	}
	


	//插入测试


}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门提示: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
