
//向栈中添加/删除数据时，只能从栈顶进行操作。
//用数组来表示int栈，学习模仿：http://www.cnblogs.com/skywang12345/p/3562239.html
//use for personal study

#include "pch.h"
#include <iostream>

int createStack(int size); //创建栈，成功返回1，失败0，下同
int destoryStack1(); //销毁栈
void push(int val); //压栈
int pop(); //出栈
int peek(); //显示栈顶
void tranverse(); //遍历
int isEmpty(); //这个不用说了把
int size(); //也不用说了吧


static int * arr = NULL;//arr是数组arr[]的一个地址
static int count = -1;
int createStack(int size)
{
	arr = (int*)malloc(size * sizeof(int));//每个元素长int的size，乘上元素个数
	if (!arr)
	{
		printf("malloc errors! hs\n");
		return 0;
	}
	count = 0;
	return 1;
}

int destoryStack1()
{
	if (arr)
	{
		free(arr);
		arr = NULL;
		printf("successfully destory!\n");
		return 1;

	}
	else
		printf("destory failed\n");
	return 0;
}

void push(int val)
{
	arr[count] = val;
	count++;
}
int peek()
{
	return arr[count - 1];
}
int pop()
{
	int pout = arr[count - 1];
	count--;
	return pout;
}
int size()
{
	return count;
}

int isEmpty() {
	return count == 0;
}

void tranverse()
{
	if (count == 0)
		printf("stack is empty\n");
	printf("stack size()=%d\n", size());
	int i = size() - 1;
	while (i>=0)
	{
		printf("%d\n", arr[i]);
		i--;
	}
	
}

int main()
{
	int temp = 0;
	createStack(12);
	printf("size =  %d\n", size());
	push(10); push(20); push(30);
	printf("size =  %d\n", size());

	temp = pop();
	printf("temp=%d\n", temp);
	printf("size =  %d\n", size());
	temp = peek();
	printf("temp=%d\n", temp);
	printf("size =  %d\n", size());
	push(40);
	tranverse();
	printf("size =  %d\n", size());
	destoryStack1();
	return 1;
}

//变化的是count，当push后，原来count初的元素背覆盖.他这个思路封装很好，我访问不到stack本身。因为没structure
